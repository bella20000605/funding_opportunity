name: Weekly funding opportunity scraper and Email Sender

on:
  schedule:
    # Runs at 2:13 PM ET (19:13 UTC) every Tuesday
    - cron: '13 19 * * 2'
  workflow_dispatch: # Allows manual triggering

jobs:

  run-scraper-and-send-email:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Cache dependencies (this will create or clear the cache based on the cache key)
      # clear any previous cache and ensure that dependencies are freshly installed without using any cached versions that might be causing issues.
      - name: Cache Poetry dependencies
        uses: actions/cache@v3  # Ensure we are using v3 of cache action
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # Step 3: Set up Python 3.11
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Step 4: Install Poetry
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      # Step 5: Install dependencies using Poetry
      - name: Install dependencies
        run: |
          poetry install

      # Step 6: Install Chrome for the GitHub Actions (Ubuntu)
      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      # Step 7: Run the scraper Python script using Poetry
      - name: Run the scraper script
        run: |
          poetry run python funding_opportunity/scraper.py

      # Step 8: Create client_secret.json automatically from GitHub Secret
      - name: Create client_secret.json
        run: |
          echo "$CLIENT_SECRET_JSON" > funding_opportunity/client_secret.json
        env:
          CLIENT_SECRET_JSON: ${{ secrets.CLIENT_SECRET_JSON }}

      # Step 9: Run the email-sending Python script using Poetry
      - name: Run weekly email script
        run: |
          poetry run python funding_opportunity/send_email.py
